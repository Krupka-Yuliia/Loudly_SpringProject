openapi: 3.0.0
info:
  title: Loudly App API
  description: API for managing artists, playlists, songs, and users
  version: 1.0.0

servers:
  - url: http://localhost:8080/api
    description: Base API path

components:
  schemas:
    ArtistDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        nickname:
          type: string

    PlaylistDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64

    SongDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the song
        title:
          type: string
          description: Title of the song
        format:
          type: string
          description: Audio format of the song file (e.g., MP3, WAV)
        file:
          type: string
          format: byte
          description: Binary content of the song file
        artistId:
          type: integer
          format: int32
          description: ID of the artist who created the song
        artistName:
          type: string
          description: Name of the artist
        genre:
          type: string
          description: Musical genre of the song
        year:
          type: integer
          format: int32
          description: Release year of the song
      required:
        - title
        - artistId

    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string

paths:
  /artists:
    get:
      summary: Get all artists
      responses:
        '200':
          description: List of artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtistDTO'

    post:
      summary: Create a new artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistDTO'
      responses:
        '200':
          description: Created artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistDTO'

    delete:
      summary: Delete all artists
      responses:
        '200':
          description: All artists deleted

  /artists/{artistId}:
    get:
      summary: Get artist by ID
      parameters:
        - name: artistId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Artist found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistDTO'

    put:
      summary: Update artist
      parameters:
        - name: artistId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistDTO'
      responses:
        '200':
          description: Updated artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistDTO'

    delete:
      summary: Delete artist by ID
      parameters:
        - name: artistId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Artist deleted

  /artists/search:
    get:
      summary: Search artist by nickname
      parameters:
        - name: nickname
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Artist found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistDTO'

  /playlists:
    get:
      summary: Get playlists for authenticated user
      responses:
        '200':
          description: List of playlists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlaylistDTO'

    post:
      summary: Create a new playlist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistDTO'
      responses:
        '200':
          description: Created playlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistDTO'

    delete:
      summary: Delete all playlists
      responses:
        '200':
          description: All playlists deleted

  /playlists/{playlistId}:
    get:
      summary: Get playlist by ID
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Playlist found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistDTO'

    put:
      summary: Update playlist
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistDTO'
      responses:
        '200':
          description: Updated playlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistDTO'

    delete:
      summary: Delete playlist by ID
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Playlist deleted

  /playlists/{playlistId}/songs:
    get:
      summary: Get songs in playlist
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of songs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SongDTO'

    delete:
      summary: Delete all songs from playlist
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: All songs removed from playlist

  /playlists/{playlistId}/songs/{songId}:
    post:
      summary: Add song to playlist
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: songId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Song added to playlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistDTO'

    delete:
      summary: Remove song from playlist
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: songId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Song removed from playlist

  /songs:
    get:
      summary: Get all songs
      responses:
        '200':
          description: List of songs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SongDTO'

    post:
      summary: Create a new song
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongDTO'
      responses:
        '200':
          description: Created song
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongDTO'

    delete:
      summary: Delete all songs
      responses:
        '200':
          description: All songs deleted

  /songs/{songId}:
    get:
      summary: Get song by ID
      parameters:
        - name: songId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Song found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongDTO'

    put:
      summary: Update song
      parameters:
        - name: songId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongDTO'
      responses:
        '200':
          description: Updated song
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongDTO'

    delete:
      summary: Delete song by ID
      parameters:
        - name: songId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Song deleted

  /songs/search:
    get:
      summary: Search songs by title
      parameters:
        - name: title
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of matching songs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SongDTO'

  /songs/searchByGenre:
    get:
      summary: Search songs by genre
      parameters:
        - name: genre
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of matching songs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SongDTO'

  /songs/searchByArtistId:
    get:
      summary: Search songs by artist ID
      parameters:
        - name: artistId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of matching songs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SongDTO'

  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'

    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'

    delete:
      summary: Delete all users
      responses:
        '200':
          description: All users deleted

  /users/{userId}:
    get:
      summary: Get user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'

    put:
      summary: Update user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'

    delete:
      summary: Delete user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User deleted